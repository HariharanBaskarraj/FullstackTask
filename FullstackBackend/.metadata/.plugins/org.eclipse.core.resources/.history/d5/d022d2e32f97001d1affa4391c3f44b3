/**
 * 
 */
package com.movie.controllers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.movie.model.Movie;
import com.movie.service.IMovieService;

/**
 * The controller class that maps the url to the methods.
 * 
 * @author HariharanB
 */
@RestController
@RequestMapping("/movieservice")
@CrossOrigin("http://localhost:4200")
public class MovieController {

	private IMovieService movieService;
	private Logger logger = LoggerFactory.getLogger(MovieController.class);

	@Autowired
	public void setMovieService(IMovieService movieService) {
		this.movieService = movieService;
	}

	/**
	 * This method is used to add a new movie record to the database.
	 * 
	 * @param movie Movie object
	 * @author HariharanB
	 */
	@PostMapping("/movies")
	@PreAuthorize("hasAnyRoles('admin')")
	ResponseEntity<Void> addMovie(@RequestBody Movie movie) {
		HttpHeaders header = new HttpHeaders();
		header.add("desc", "Add the movie to the db");
		header.add("info", "API-add movie");
		logger.info("In Controller, Adding");
		movieService.addMovie(movie);
		return ResponseEntity.status(HttpStatus.OK).build();
	}

	/**
	 * This method is used to edit specific details of existing movie records in the
	 * database.
	 * 
	 * @param movie Movie object
	 * @author HariharanB
	 */
	@PutMapping("/movies")
	@PreAuthorize("hasAnyRoles('admin','manager')")
	ResponseEntity<Void> updateMovie(@RequestBody Movie movie) {
		HttpHeaders header = new HttpHeaders();
		header.add("desc", "Update the movie in the db");
		header.add("info", "API-update movie");
		logger.info("In Controller, Updating");
		movieService.updateMovie(movie);
		return ResponseEntity.status(HttpStatus.OK).build();
	}

	/**
	 * This method is used to delete any existing movie record from the database.
	 * 
	 * @param movieId The unique ID of the movie to delete
	 * @author HariharanB
	 */
	@DeleteMapping("/movies/{movieId}")
	@PreAuthorize("hasAnyRoles('admin')")
	ResponseEntity<Void> deleteMovie(@PathVariable int movieId) {
		HttpHeaders header = new HttpHeaders();
		header.add("desc", "Deletes the movie in the db");
		header.add("info", "API-delete movie");
		logger.info("In Controller, Deleting");
		movieService.deleteMovie(movieId);
		return ResponseEntity.status(HttpStatus.OK).build();
	}

}
